{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset2 Symbol;}}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\qc\b\f0\fs40\lang9 Chapter-17 smell & Heuristics\fs28\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Comments\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Inappropriate Information\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 Inappropriate information like source code control system,your issue tracking system or any other record-keeping system\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Obsolete comment\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 A comment that has gotten old,irrelevant and incorrect is obsolete\par
{\pntext\f1\'B7\tab}Comment gets old quickly , it is best not to write comment that will become obsolete.\par
{\pntext\f1\'B7\tab}if you find an obsolte comment it is best to update it or get rid(eliminate) of it as quickly as possible\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Redundant Comment\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 A comment with unnecessary information.\par
{\pntext\f1\'B7\tab}The comment should say that the code cannot say\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Poorly Written Comment\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 Going to write a comment take the time to make sure it is the best comment you can write \par
{\pntext\f1\'B7\tab}Choose your word carefully ,use correct grammar and punctuation\par
{\pntext\f1\'B7\tab}Don't ramble(writting in a confused way) ,Don't state the obvious be brief\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Comment-out code\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 Don't Comment out code,because coworker can be afraid of touching those code and simply rots(go bad) the code\par
{\pntext\f1\'B7\tab}When you see commented-out code delete it! dont worry the source code control system still remebers \par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b Enviroment\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Build requires more than one step\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 Building a project should be single trivial operation\par
{\pntext\f1\'B7\tab}You should not have to check many little piece out from source code control\par
{\pntext\f1\'B7\tab}Build should be in one command to run and one command to check\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Tests require more than one step\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 You should be able to run all the unit test with just one command\par
{\pntext\f1\'B7\tab}In the best case you can run all the tests by clicking on one button on IDE\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b Function \b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Too many arguments\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 Function should have small number of argument, No argument is best followed by one ,two and three more than three is questionable should be avoided,\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Output arguments\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 Reader expect arguments to be inputs not outputs\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Flag arguments\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 Should avoid flag arguments passing into function\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Dead function\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 Method that is never called is called dead function,Which should be discarded\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b General\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Multiple language in one source file\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 Today's modern programming enviroments make it possible to put many different language into a single source file\par
{\pntext\f1\'B7\tab}For example, a Java source file might contain snippets of XML, HTML, YAML, JavaDoc, English, JavaScript, and so on \par
{\pntext\f1\'B7\tab}This confusing at best and carelessly sloppy(lack of care) at worst\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Obvious behavior is Unimplemented\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 When an obvious behavior is not implemented, readers and users of the code can no longer depended on their intution about function name\par
{\pntext\f1\'B7\tab}they lose their trust in the original author and must fall back on reading the detail of code\par
{\pntext\f1\'B7\tab}the result of a function or class should not be a surprise\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Incorrect behaviour at the boundaries\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 It seems obvious to say that code should behave correctly\par
{\pntext\f1\'B7\tab}Test all the case look for every bondary condition(every end)\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Overridden Safeties\tab\tab\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 It is risky to override safeties\par
{\pntext\f1\'B7\tab}Turning off certain compiler warning may helps you get the build to succeed but at the risk of endless debugging session\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Duplication\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 DRY Principle (Dont repeat yourself)\par
{\pntext\f1\'B7\tab}kent beck made it one of the core principle of extremming programming and called it \b "Once and only once"\b0\par
{\pntext\f1\'B7\tab}Every time you see \b dplication \b0 in the code it represent a \b missed opprtunity for abstraction\par
{\pntext\f1\'B7\tab}\b0 modules that have similar algorithms but that don't share similar lines of code\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Code at wrong level of abstraction\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 It is important to create abstraction that separate higher-level general concept from lower-level detailed concept\par
{\pntext\f1\'B7\tab}We want all the lower level concept to be in the derivatives and all the higher level concept to be in the base class\par
{\pntext\f1\'B7\tab}Good software design required that we seperate concept at different level and place them in different container\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Base Classes depending on their derivatives\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b (base class means whose members are inherited by another class and derived class can only have one direct base class)\b0\par
{\pntext\f1\'B7\tab}Base class should know nothing about their derivatives\par
{\pntext\f1\'B7\tab}In the general case we want to be able to deploy derivatives and bases in different jar files\par
{\pntext\f1\'B7\tab}And make sure the basic jar files know nothing about the contents of the derivative jar file allow us to deploy our system in discrete in independent component\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Too much information\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 Well defined modules have very small interface that allow you to do a lot with little.\par
{\pntext\f1\'B7\tab}A poorly defined interface provides lots of function that you must call so coupling is high\par
{\pntext\f1\'B7\tab}Good software developer learn to limit what they expose at the interface of their classes and modules\par
{\pntext\f1\'B7\tab}Hide your data.Hide your utilities function hide your constant and your temporaries,Dont create lots of protected variable and function for your subclasses\par
{\pntext\f1\'B7\tab}Concentrate on keeping interfaces very tight and very small. Help keep coupling low by limiting information\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Dead Code\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 Dead code is code that isn't executed\par
{\pntext\f1\'B7\tab}when you find dead code,delete it\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Vertical Seperation\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 Variable and function should be defined close to where they are used\par
{\pntext\f1\'B7\tab}Local variable should be declared just above their usage and should have a vertical scope\par
{\pntext\f1\'B7\tab}private function should be defined just below their first usage \par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Inconsistency\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 If you do something a certain way do all the similar things in the same way\par
{\pntext\f1\'B7\tab}Be carefull with convention you choose and once chosen be careful to continue to follow them\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Clutter\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 Variable that aren't used, function that are never called comments that add no information and so forth\par
{\pntext\f1\'B7\tab}All these things clutter and should be removed. keep your source files clean,Well organized and free of clutter\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Artificial coupling\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 Things that don't depend upon each other should not be artificially coupled\par
{\pntext\f1\'B7\tab}an artificial coupling is coupling between two modules that serves no direct purpose \par
{\pntext\f1\'B7\tab}It is a result of putting a variable,constant or function\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Feature Envy (reveals a method that would work better on different class)\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 The method of class should be interested in the variable and function of the class \b they belong to\b0  and \b not \b0 the variable and functions of \b other class\par
{\pntext\f1\'B7\tab}\b0 Method one class should not be interesting to the method of another class\par
{\pntext\f1\'B7\tab}We want to eliminate feature envy because it exposes the internal of one class to another\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Selector Arguments\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 Selector argument are combine many function into one.\par
{\pntext\f1\'B7\tab}Dont use selector arguments because it will keep one large function that is need to be split\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Obscured Intent\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 Code should not be magic or obsucre(not well known) (it shoud not block the intent of code)\par
{\pntext\f1\'B7\tab}Code should be placed where a reader would naturally expect it to be\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Misplaced Responsiblity\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 One of the most important decision a software developer can \b make it where to put code\par
{\pntext\f1\'B7\tab}\b0 Code should be placed where a reader would naturally expected it to be.\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Inappropriate Static\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b static method \b0 ideal for utility funtion (that performs specfic task) \b do not depend on instance data \b0 and where \b polymorphism is not needed \b0 ex:math.max(int a,int b);\par
{\pntext\f1\'B7\tab}\b nonstatic method:\b0 It belongs to instance of class,use when the method need to access or modify instance data or should \b support polymorphism \b0 ex:method for calculating pay the varies by emplyee type\par
{\pntext\f1\'B7\tab}\b Prefer nonstatic method for flexibility and polymorphism\b0 .\b use static methods only when you're sure they don't need to be polymorphic\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Use Explanatory Variables\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 Breaks the Complex calculation into variables with meaningful names\par
{\pntext\f1\'B7\tab}example: String key="" String Value=""  Variables 'key' and 'value' make the code purpose clear\par
{\pntext\f1\'B7\tab}Use more explanory variables for better code clarity\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Function Names Should Say What they do\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 Function names should clarity indicate their effect and whether they modify the instance or return new one\par
{\pntext\f1\'B7\tab}if modify new instance : use names like 'addDaysTo'\par
{\pntext\f1\'B7\tab}if returning new instance: use names like 'daysLater'\par
{\pntext\f1\'B7\tab}Ensure the function name convey what it does without needing to check the implementation or documentation\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Understand the agorithm\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b Before you consider yourself to be done \b0 with function, make sure you \b understand how it works\b0\par
{\pntext\f1\'B7\tab}It is common iteratively test and refine code make it work\par
{\pntext\f1\'B7\tab}\b passing test case is not enough \b0 ensure you \b fully understand how the function work \b0 and that the solution is correct\par
{\pntext\f1\'B7\tab}Refractor the function to make it clean and expressive which helps in understanding and confirming its correctness\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Make logical dependencies physical\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 If one modules depends upon another that dependency should be physical not just logical\par
{\pntext\f1\'B7\tab}The dependent module should not make assumption about the module it depends upon \par
{\pntext\f1\'B7\tab}Rather it should ask module about the information depend on\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Prefer polymorphism to If/else or Switch/Case\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 Consider using polymorphism instead of switch statement which are often a brute force solution\par
{\pntext\f1\'B7\tab}\b One Switch Rule:\b0  Limit to one switch statement per type of selection, The switch cases should create polymorphic objects to replace other switch statment elsewhere in the system\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Follow Standard Convension \b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 Every team should follow a coding standard based on common industry norms\par
{\pntext\f1\'B7\tab}It is like team rule follow the team rule for formatting how to name variables,were to declare instance variable etc..\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Replaced Magic number with named constants\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 In general it is bad idea to have raw number in your code . You should hide them behind well named constant\par
{\pntext\f1\'B7\tab}Example : number 83000 should be hidden behind the constant SECONDS_PER_DAY \par
{\pntext\f1\'B7\tab}If you are printing 55 line per page then constant 55 should be hide behind the constant LINES_PER_PAGE\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Be Precise\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 When you make a decision in your code make sure you make it precisely - \b Know why you have made it and how you deal with any exception\b0\par
{\pntext\f1\'B7\tab}\b Handiling Potential Issues: \b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1800\sa200\sl276\slmult1 Checks for null if function might return \par
{\pntext\f1\'B7\tab}Use integer for currency and handle routing properly\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 Eliminate ambiguities(unclear) and imprecision caused by disagreement\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Struture over convention\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 Use structural design over naming converntions to enforce design decision\par
{\pntext\f1\'B7\tab}Example:- Base Classes with abstract methods are more efficient than switch/case statement with named enumeration\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Encapsulate conditionals\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 Use funtion to explain the intent of boolean logic with conditional\par
{\pntext\f1\'B7\tab}Extracting functions makes boolean logic easier to understand and improves code readability\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Avoid negative conditionals\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 Negatives are just a bit harder to understand than positives\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Function should do one thing\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 Functions of this kind do more than one things and should be converted into smaller functions,\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Dont be Arbitary(unfair)\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 Structure code with clear reason and communicate those reason through the structure\par
{\pntext\f1\'B7\tab}Consistent stucture helps others follow conventions and prevent arbitary changes\par
{\pntext\f1\'B7\tab}Public class should be top level in their package not nested inside unrelated classes\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Encapsulate Boundary conditions\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 Boundary conditions are hard to keep track of\par
{\pntext\f1\'B7\tab}put the processing for them in one place\par
{\pntext\f1\'B7\tab}Dont let them leak all over the code\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Function should descend only one level of abstraction\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 All statement within a function should be at the same level of abstraction which should be one level below the function's name\par
{\pntext\f1\'B7\tab}\b Example issue: \b0 Mixing level of abstraction\b  \b0 original code combined html tag syntax with bussiness logic\par
{\pntext\f1\'B7\tab}Seperate levels of abstraction can reveal additional abstraction and improves code organization\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1  \b Keep configurable data at high levels\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 If a constant like a default value is know as high level dont hide it low level function\par
{\pntext\f1\'B7\tab}pass the constant as an argument from high-level function to low level funtion\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Avoid transitive Navigation\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b Law of Demeter:\b0  Modules should only know about their direct collaborators, not the entire object graph.\par
{\pntext\f1\'B7\tab}\b Avoid deep navigation\b0\par

\pard\sa200\sl276\slmult1\par
}
 