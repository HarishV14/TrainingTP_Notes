{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset2 Symbol;}}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\qc\b\f0\fs44\lang9 Chapter-3 Functions\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\fs32 Small\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1 1st rule function should be small\par
{\pntext\f1\'B7\tab}Function should hardly ever be 20 lines long\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b\fs32 Blocks and indenting\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\fs32 block within if statament , else and while statement should be one line long\fs22\par
{\pntext\f1\'B7\tab}\fs32 function should not large enough to hold nested stucture\fs22\par
{\pntext\f1\'B7\tab}\fs32 indent level function should not greater than one or two\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b\fs32 Do one thing\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\fs32 function should do one thing.They should do it well they should do it only\fs22\par
{\pntext\f1\'B7\tab}\fs32 simply it means one function do only one thing more that the function contains then that should be spillited\fs22\par
{\pntext\f1\'B7\tab}\b\fs32 Sections within function\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\fs32 generatePrimes function is divided into section such as decalaration and intialization etc...\fs22\par
{\pntext\f1\'B7\tab}\fs32 it is symptoms of doing more than one things this cannot reasonable\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b\fs32 One Level of Abstraction Function\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\fs32 Statement within our functions all at the same level of abstraction\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b\fs32 Reading code from top to bottom : The Stepdown Rule\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1800\sa200\sl276\slmult1\fs32 function that should be in\b  \b0 single level of abstraction it is key to keep function keep it short and to keep it to do one thing\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b\fs32 Switch Statement\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\fs32 In nature switch statement always do n things but we cannot avoid switch statement but we avoid repeation and we can do with polymorphism\fs22\par
{\pntext\f1\'B7\tab}\fs32 Use them only when necessary\fs22\par
{\pntext\f1\'B7\tab}\fs32 use abstract factory design pattern and create polymorphism objects\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b\fs32 Use Descriptive names\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\fs32 The smaller and more focused function is the easier it is to choose a descriptive name\fs22\par
{\pntext\f1\'B7\tab}\fs32 Ward\rquote s principle: \ldblquote You know you are working on clean code when each routine turns out to be pretty much what you expected.\rdblquote\fs22\par
{\pntext\f1\'B7\tab}\fs32 A long descriptive name is better than the short name\fs22\par
{\pntext\f1\'B7\tab}\fs32 A long descriptive name is better than long descriptive command\fs22\par
{\pntext\f1\'B7\tab}\fs32 use multiple words for the function name to say what it does\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b\fs32 Function Argument\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\fs32 one or two argument ok three arguments should avoid were possible where more than three use in very special justification\fs22\par
{\pntext\f1\'B7\tab}\fs32 using more argument make testing challenge\fs22\par
{\pntext\f1\'B7\tab}\b\fs32 Common monadic forms\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\fs32 there are two very common reason to pass single argument in a function\fs22\par
{\pntext\f1\'B7\tab}\fs32 1st is when u are asking question in boolean type\fs22\par
{\pntext\f1\'B7\tab}\fs32 2nd is transforming into something else and returning it\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b\fs32 Flag Argument\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\fs32 Flag arguments are ugly \fs22\par
{\pntext\f1\'B7\tab}\fs32 It does one thing if the flag is true and another if the flag is false!\fs22\par
{\pntext\f1\'B7\tab}\fs32 should not use flag argument\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b\fs32 Dyadic Functions\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\fs32 it will be better to convert dyadic to monadic\fs22\par
{\pntext\f1\'B7\tab}\fs32 example writeField(outputStream, name) can convert to monadic by any one of these methods\fs22\par
{\pntext\f1\'B7\tab}\fs32 Make the writeField a member function of outputStream class so that you can say outputStream.writeField(name)\par
{\pntext\f1\'B7\tab}Or make the outputStream a member variable of the current class so that you don\rquote t have to pass it, like this writeField(name).\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b\fs32 Triadic\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\fs32 Should not use three arguments ,it is difficult to understand,you should think very carefull when creating a triadic argument\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b\fs32 Argument objects\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\fs32 function seems need more than two or three arguments make some argument wrapped in class of their own\fs22\par
{\pntext\f1\'B7\tab}\fs32 Circle makeCircle(double x, double y, double radius);\par
{\pntext\f1\'B7\tab}Circle makeCircle(Point center, double radius);\fs22\par
{\pntext\f1\'B7\tab}\fs32 both doing same thing 2nd one wraps the number of argument\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b\fs32 Arguments List\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\fs32 it is passing list in the argument\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b\fs32 Have no side effects\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\fs32 function promise to do one thing but also do other hidden thing it will make unexpected changes to variable of its own class\fs22\par
{\pntext\f1\'B7\tab}\fs32 function only do mentioned in the function name\fs22\par
{\pntext\f1\'B7\tab}\b\fs32 Output arguments\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\fs32 For example-   appendFooter(s)   (it is not obvious)\par
{\pntext\f1\'B7\tab}public void appendFooter(StringBuffer report)  by seeing the function declaration only it tells what it does.\par
{\pntext\f1\'B7\tab}Better use it like   report.appendFooter(); \fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b\fs32 Command Query operation\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\fs32 function should either do something or answer something but not both (change state of object or return some information)\fs22\par
{\pntext\f1\'B7\tab}\fs32 Doing both leads to confustion\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b\fs32 Prefered Exception to returning the error code\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\fs32 Returning error code from command function is a violation\fs22\par
{\pntext\f1\'B7\tab}\fs32 when your return error code you create the problem that the caller must deal with immediately\fs22\par
{\pntext\f1\'B7\tab}\b\fs32 Extract try/catch Blocks\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\fs32 Try/catch blocks that are ugly and confuse the structure of the code and mix error processing with normal processing. So it is better to extract the bodies of the try and catch blocks out into functions of their own\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b\fs32 Error Handiling is one thing\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\fs32 function that handles error should do nothing else\fs22\par
{\pntext\f1\'B7\tab}\fs32 Try keyword should be in the first line of the function, and there should be nothing after the finally/catch block\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b\fs32 Dependency Magnet\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\fs32 Some class or enum in which all the error codes are defined classes like this are dependency magnet\fs22\par
{\pntext\f1\'B7\tab}\fs32 Many other class must import and use them\fs22\par
{\pntext\f1\'B7\tab}\fs32 When error enum changes all those classes need to be recompiled and redeployed\fs22\par
{\pntext\f1\'B7\tab}\fs32 programmers dont want to add new errors\tab because then they have to rebuild or redeploy So they reuse old error codes instead of adding new ones\fs22\par
{\pntext\f1\'B7\tab}\fs32 When you use exceptions rather than error codes, then new exceptions are derivatives of the exception class. They can be added without forcing any recompilation or redeployment\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b\fs32 Dont repeat yourself\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\fs32 There should not have duplication function by the body also not only the fuction name\fs22\par
{\pntext\f1\'B7\tab}\fs32 It main aim to reduce repetition\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b\fs32 Structured Programming\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\fs32 every function should have one entry and one exit\fs22\par
{\pntext\f1\'B7\tab}\fs32 By rules there should be only one return statement,no break or continue statement in loop and never ever any goto statement\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b\fs32 How do you write function like this\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\fs32 Clean up the code once it done\fs22\par
}
 